{"ast":null,"code":"var _jsxFileName = \"/home/fred/Vid\\xE9os/MERN-groupomania/client/src/components/Form/Form.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { TextField, Button, Typography, Paper, TextareaAutosize } from '@material-ui/core';\nimport EmojiEmotionsOutlined from '@material-ui/icons/EmojiEmotionsOutlined';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64'; // Emoji\n\nimport Picker from 'emoji-picker-react'; //image\n\nimport colorFull from '../../images/colorful.png';\nimport bg1 from '../../images/background/1.jpg';\nimport bg2 from '../../images/background/2.jpg';\nimport bg3 from '../../images/background/5.jpg';\nimport bg4 from '../../images/background/7.jpg';\nimport bg5 from '../../images/background/10.jpg';\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  var _user$result3;\n\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const [picker, setPicker] = useState(false);\n  const [showBabckground, setShowBackground] = useState(false);\n  const textRef = useRef(null);\n  const bgRef = useRef(null);\n  const [background, setbackground] = useState('');\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  const handleEmoji = (e, {\n    emoji\n  }) => {\n    const ref = textRef.current;\n    ref.focus();\n  };\n\n  if (!(user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.name)) {\n    return /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paperForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, \"Veuillez vous connecter pour cr\\xE9er un post ou int\\xE9ragir avec vos coll\\xE8gues.\"));\n  }\n\n  const postBackgrounds = [bg1, bg2, bg3, bg4, bg5];\n\n  const backgroundHandler = i => {};\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, currentId ? `Modifier \"${post.title}\"` : 'Creer'), /*#__PURE__*/React.createElement(TextField, {\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"Titre\",\n    fullWidth: true,\n    value: postData.title,\n    onChange: e => setPostData({ ...postData,\n      title: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: bgRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    ref: textRef,\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"Message\",\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    value: postData.message,\n    onChange: e => setPostData({ ...postData,\n      message: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.emojiWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, picker && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.emoji,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Picker, {\n    onEmojiClick: handleEmoji,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 44\n    }\n  })), /*#__PURE__*/React.createElement(\"img\", {\n    onClick: () => {\n      setShowBackground(prev => !prev);\n    },\n    className: classes.emojiImage,\n    src: colorFull,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.postbackground,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noBackground,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), postBackgrounds.map((bg, i) => /*#__PURE__*/React.createElement(\"img\", {\n    onClick: () => {\n      backgroundHandler(i);\n    },\n    className: classes.backgroundImages,\n    src: bg,\n    key: i,\n    alt: \"background photos\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(EmojiEmotionsOutlined, {\n    onClick: () => {\n      setPicker(prev => !prev);\n    },\n    className: classes.emojiIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TextField, {\n    name: \"tags\",\n    variant: \"outlined\",\n    label: \"Tags (s\\xE9par\\xE9s par des virgules)\",\n    fullWidth: true,\n    value: postData.tags,\n    onChange: e => setPostData({ ...postData,\n      tags: e.target.value.split(',')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FileBase, {\n    type: \"file\",\n    multiple: false,\n    onDone: ({\n      base64\n    }) => setPostData({ ...postData,\n      selectedFile: base64\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 44\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.buttonSubmit,\n    variant: \"contained\",\n    size: \"large\",\n    type: \"submit\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Poster\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    size: \"small\",\n    onClick: clear,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, \"Effacer\")));\n};\n\nexport default Form;","map":{"version":3,"sources":["/home/fred/Vid√©os/MERN-groupomania/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","useRef","TextField","Button","Typography","Paper","TextareaAutosize","EmojiEmotionsOutlined","useDispatch","useSelector","FileBase","Picker","colorFull","bg1","bg2","bg3","bg4","bg5","createPost","updatePost","useStyles","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","post","state","posts","find","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","picker","setPicker","showBabckground","setShowBackground","textRef","bgRef","background","setbackground","clear","handleSubmit","e","preventDefault","name","result","handleEmoji","emoji","ref","current","focus","paperForm","postBackgrounds","backgroundHandler","i","paper","root","form","target","value","emojiWrapper","prev","emojiImage","postbackground","noBackground","map","bg","backgroundImages","emojiIcon","split","fileInput","base64","buttonSubmit"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,UAA5B,EAAwCC,KAAxC,EAA+CC,gBAA/C,QAAwE,mBAAxE;AACA,OAAOC,qBAAP,MAAkC,0CAAlC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,oBAAnB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,+BAAhB;AACA,OAAOC,GAAP,MAAgB,+BAAhB;AACA,OAAOC,GAAP,MAAgB,+BAAhB;AACA,OAAOC,GAAP,MAAgB,+BAAhB;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AAEA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,qBAAvC;AACA,OAAOC,SAAP,MAAsB,UAAtB;;AAKA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAiC;AAAA;;AAC5C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,CAAC;AAAE2B,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,OAAO,EAAE,EAAtB;AAA0BC,IAAAA,IAAI,EAAE,EAAhC;AAAoCC,IAAAA,YAAY,EAAE;AAAlD,GAAD,CAAxC;AACA,QAAMC,IAAI,GAAGrB,WAAW,CAAEsB,KAAD,IAAYT,SAAS,GAAGS,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAkBN,OAAD,IAAaA,OAAO,CAACO,GAAR,KAAgBZ,SAA9C,CAAH,GAA8D,IAApF,CAAxB;AACA,QAAMa,QAAQ,GAAG3B,WAAW,EAA5B;AACA,QAAM4B,OAAO,GAAGhB,SAAS,EAAzB;AACA,QAAMiB,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,CAAb;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB5C,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAAC6C,eAAD,EAAkBC,iBAAlB,IAAuC9C,QAAQ,CAAC,KAAD,CAArD;AACA,QAAM+C,OAAO,GAAG7C,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM8C,KAAK,GAAG9C,MAAM,CAAC,IAAD,CAApB;AAEA,QAAM,CAAC+C,UAAD,EAAaC,aAAb,IAA8BlD,QAAQ,CAAC,EAAD,CAA5C;AAMAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8B,IAAJ,EAAUL,WAAW,CAACK,IAAD,CAAX;AACX,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMoB,KAAK,GAAG,MAAM;AAClB3B,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,IAAAA,WAAW,CAAC;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,OAAO,EAAE,EAAtB;AAA0BC,MAAAA,IAAI,EAAE,EAAhC;AAAoCC,MAAAA,YAAY,EAAE;AAAlD,KAAD,CAAX;AACD,GAHD;;AAMA,QAAMsB,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI/B,SAAS,KAAK,CAAlB,EAAqB;AAAA;;AACnBa,MAAAA,QAAQ,CAACjB,UAAU,CAAC,EAAE,GAAGM,QAAL;AAAe8B,QAAAA,IAAI,EAAEjB,IAAF,aAAEA,IAAF,uCAAEA,IAAI,CAAEkB,MAAR,iDAAE,aAAcD;AAAnC,OAAD,CAAX,CAAR;AACAJ,MAAAA,KAAK;AACN,KAHD,MAGO;AAAA;;AACLf,MAAAA,QAAQ,CAAChB,UAAU,CAACG,SAAD,EAAY,EAAE,GAAGE,QAAL;AAAe8B,QAAAA,IAAI,EAAEjB,IAAF,aAAEA,IAAF,wCAAEA,IAAI,CAAEkB,MAAR,kDAAE,cAAcD;AAAnC,OAAZ,CAAX,CAAR;AACAJ,MAAAA,KAAK;AACN;AACF,GAVD;;AAYA,QAAMM,WAAW,GAAG,CAACJ,CAAD,EAAI;AAAEK,IAAAA;AAAF,GAAJ,KAAkB;AACpC,UAAMC,GAAG,GAAGZ,OAAO,CAACa,OAApB;AACAD,IAAAA,GAAG,CAACE,KAAJ;AACD,GAHD;;AAKA,MAAI,EAACvB,IAAD,aAACA,IAAD,wCAACA,IAAI,CAAEkB,MAAP,kDAAC,cAAcD,IAAf,CAAJ,EAAyB;AACvB,wBACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAElB,OAAO,CAACyB,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,KAAK,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FADF,CADF;AAOD;;AAED,QAAMC,eAAe,GAAG,CACtBjD,GADsB,EAEtBC,GAFsB,EAGtBC,GAHsB,EAItBC,GAJsB,EAKtBC,GALsB,CAAxB;;AAQA,QAAM8C,iBAAiB,GAAIC,CAAD,IAAO,CAEhC,CAFD;;AAIA,sBAEE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAE5B,OAAO,CAAC6B,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,YAAY,EAAC,KAAnB;AAAyB,IAAA,UAAU,MAAnC;AAAoC,IAAA,SAAS,EAAG,GAAE7B,OAAO,CAAC8B,IAAK,IAAG9B,OAAO,CAAC+B,IAAK,EAA/E;AAAkF,IAAA,QAAQ,EAAEhB,YAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0B7B,SAAS,GAAI,aAAYQ,IAAI,CAACJ,KAAM,GAA3B,GAAgC,OAAnE,CADF,eAEE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AAAwB,IAAA,OAAO,EAAC,UAAhC;AAA2C,IAAA,KAAK,EAAC,OAAjD;AAAyD,IAAA,SAAS,MAAlE;AAAmE,IAAA,KAAK,EAAEF,QAAQ,CAACE,KAAnF;AAA0F,IAAA,QAAQ,EAAG0B,CAAD,IAAO3B,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,MAAAA,KAAK,EAAE0B,CAAC,CAACgB,MAAF,CAASC;AAA/B,KAAD,CAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAK,IAAA,GAAG,EAAEtB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAED,OAAhB;AAAyB,IAAA,IAAI,EAAC,SAA9B;AAAwC,IAAA,OAAO,EAAC,UAAhD;AAA2D,IAAA,KAAK,EAAC,SAAjE;AAA2E,IAAA,SAAS,MAApF;AAAqF,IAAA,SAAS,MAA9F;AAA+F,IAAA,IAAI,EAAE,CAArG;AAAwG,IAAA,KAAK,EAAEtB,QAAQ,CAACG,OAAxH;AAAiI,IAAA,QAAQ,EAAGyB,CAAD,IAAO3B,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeG,MAAAA,OAAO,EAAEyB,CAAC,CAACgB,MAAF,CAASC;AAAjC,KAAD,CAA7J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,eAME;AAAK,IAAA,SAAS,EAAEjC,OAAO,CAACkC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG5B,MAAM,iBACL;AAAK,IAAA,SAAS,EAAEN,OAAO,CAACqB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA+B,oBAAC,MAAD;AAAQ,IAAA,YAAY,EAAED,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA/B,CAFJ,eAIE;AAAK,IAAA,OAAO,EAAE,MAAM;AAAEX,MAAAA,iBAAiB,CAAE0B,IAAD,IAAU,CAACA,IAAZ,CAAjB;AAAoC,KAA1D;AAA4D,IAAA,SAAS,EAAEnC,OAAO,CAACoC,UAA/E;AAA2F,IAAA,GAAG,EAAE5D,SAAhG;AAA2G,IAAA,GAAG,EAAC,EAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE;AAAK,IAAA,SAAS,EAAEwB,OAAO,CAACqC,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAErC,OAAO,CAACsC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGZ,eAAe,CAACa,GAAhB,CAAoB,CAACC,EAAD,EAAKZ,CAAL,kBACnB;AAAK,IAAA,OAAO,EAAE,MAAM;AAAED,MAAAA,iBAAiB,CAACC,CAAD,CAAjB;AAAsB,KAA5C;AAA8C,IAAA,SAAS,EAAE5B,OAAO,CAACyC,gBAAjE;AAAmF,IAAA,GAAG,EAAED,EAAxF;AAA4F,IAAA,GAAG,EAAEZ,CAAjG;AAAoG,IAAA,GAAG,EAAC,mBAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAFH,CALF,eAWE,oBAAC,qBAAD;AAAuB,IAAA,OAAO,EAAE,MAAM;AAAErB,MAAAA,SAAS,CAAE4B,IAAD,IAAU,CAACA,IAAZ,CAAT;AAA4B,KAApE;AAAsE,IAAA,SAAS,EAAEnC,OAAO,CAAC0C,SAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CANF,eAmBE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,MAAhB;AAAuB,IAAA,OAAO,EAAC,UAA/B;AAA0C,IAAA,KAAK,EAAC,uCAAhD;AAAkF,IAAA,SAAS,MAA3F;AAA4F,IAAA,KAAK,EAAEtD,QAAQ,CAACI,IAA5G;AAAkH,IAAA,QAAQ,EAAGwB,CAAD,IAAO3B,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeI,MAAAA,IAAI,EAAEwB,CAAC,CAACgB,MAAF,CAASC,KAAT,CAAeU,KAAf,CAAqB,GAArB;AAArB,KAAD,CAA9I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,eAoBE;AAAK,IAAA,SAAS,EAAE3C,OAAO,CAAC4C,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAmC,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC,MAAf;AAAsB,IAAA,QAAQ,EAAE,KAAhC;AAAuC,IAAA,MAAM,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgBxD,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeK,MAAAA,YAAY,EAAEoD;AAA7B,KAAD,CAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAnC,CApBF,eAqBE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAE7C,OAAO,CAAC8C,YAA3B;AAAyC,IAAA,OAAO,EAAC,WAAjD;AAA6D,IAAA,IAAI,EAAC,OAAlE;AAA0E,IAAA,IAAI,EAAC,QAA/E;AAAwF,IAAA,SAAS,MAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cArBF,eAsBE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,WAAlC;AAA8C,IAAA,IAAI,EAAC,OAAnD;AAA2D,IAAA,OAAO,EAAEhC,KAApE;AAA2E,IAAA,SAAS,MAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAtBF,CADF,CAFF;AA6BD,CA/FD;;AAiGA,eAAe7B,IAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { TextField, Button, Typography, Paper, TextareaAutosize, } from '@material-ui/core';\nimport EmojiEmotionsOutlined from '@material-ui/icons/EmojiEmotionsOutlined'\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\n\n// Emoji\nimport Picker from 'emoji-picker-react'\n//image\nimport colorFull from '../../images/colorful.png'\nimport bg1 from '../../images/background/1.jpg'\nimport bg2 from '../../images/background/2.jpg'\nimport bg3 from '../../images/background/5.jpg'\nimport bg4 from '../../images/background/7.jpg'\nimport bg5 from '../../images/background/10.jpg'\n\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\n\n\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({ title: '', message: '', tags: '', selectedFile: '' });\n  const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const [picker, setPicker] = useState(false)\n  const [showBabckground, setShowBackground] = useState(false)\n  const textRef = useRef(null)\n  const bgRef = useRef(null)\n\n  const [background, setbackground] = useState('')\n\n\n\n\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ title: '', message: '', tags: '', selectedFile: '' });\n  };\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(createPost({ ...postData, name: user?.result?.name }));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\n      clear();\n    }\n  };\n\n  const handleEmoji = (e, { emoji }) => {\n    const ref = textRef.current\n    ref.focus()\n  }\n\n  if (!user?.result?.name) {\n    return (\n      <Paper className={classes.paperForm}>\n        <Typography variant=\"h6\" align=\"center\">\n          Veuillez vous connecter pour cr√©er un post ou int√©ragir avec vos coll√®gues.\n        </Typography>\n      </Paper>\n    );\n  }\n\n  const postBackgrounds = [\n    bg1,\n    bg2,\n    bg3,\n    bg4,\n    bg5\n  ]\n\n  const backgroundHandler = (i) => {\n\n  }\n\n  return (\n\n    <Paper className={classes.paper}>\n      <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n        <Typography variant=\"h6\">{currentId ? `Modifier \"${post.title}\"` : 'Creer'}</Typography>\n        <TextField name=\"title\" variant=\"outlined\" label=\"Titre\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n        <div ref={bgRef} >\n          <TextField ref={textRef} name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n        </div>\n        <div className={classes.emojiWrapper}>\n          {picker && (\n            <div className={classes.emoji}><Picker onEmojiClick={handleEmoji} /></div>\n          )}\n          <img onClick={() => { setShowBackground((prev) => !prev) }} className={classes.emojiImage} src={colorFull} alt=\"\" />\n          <div className={classes.postbackground}>\n            <div className={classes.noBackground}></div>\n            {postBackgrounds.map((bg, i) => (\n              <img onClick={() => { backgroundHandler(i) }} className={classes.backgroundImages} src={bg} key={i} alt=\"background photos\" />\n            ))}\n          </div>\n          <EmojiEmotionsOutlined onClick={() => { setPicker((prev) => !prev) }} className={classes.emojiIcon} />\n        </div>\n        <TextField name=\"tags\" variant=\"outlined\" label=\"Tags (s√©par√©s par des virgules)\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n        <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\n        <Button className={classes.buttonSubmit} variant=\"contained\" size=\"large\" type=\"submit\" fullWidth>Poster</Button>\n        <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Effacer</Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}