{"ast":null,"code":"var _jsxFileName = \"/home/fred/Vid\\xE9os/MERN-groupomania/client/src/components/Form/Form.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { TextField, Button, Typography, Paper, Box } from '@material-ui/core';\nimport Modal from '@material-ui/core';\nimport EmojiEmotionsOutlined from '@material-ui/icons/EmojiEmotionsOutlined';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64'; // Tooltip\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab'; // Emoji\n\nimport Picker from 'emoji-picker-react'; //image\n\nimport colorFull from '../../images/colorful.png';\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  const [postData, setPostData] = useState({\n    title: '',\n    message: '',\n    tags: '',\n    selectedFile: ''\n  });\n  const post = useSelector(state => currentId ? state.posts.find(message => message._id === currentId) : null);\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const [picker, setPicker] = useState(false);\n  const textRef = useRef(null); // Moddal\n\n  const [openPostModal, setOpenPostModal] = useState(false);\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: '',\n      message: '',\n      tags: '',\n      selectedFile: ''\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n      clear();\n    } else {\n      var _user$result2;\n\n      dispatch(updatePost(currentId, { ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2.name\n      }));\n      clear();\n    }\n  };\n\n  const handleEmoji = (e, {\n    emoji\n  }) => {\n    const ref = textRef.current;\n    ref.focus();\n  };\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Ajouter un post\",\n    \"aria-label\": \"add\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Fab, {\n    className: classes.absolute,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Modal, {\n    open: openPostModal,\n    onClose: e => setOpenPostModal(false),\n    \"aria-labelledby\": \"fen\\xEAtre-du-post\",\n    \"aria-describedby\": \"fen\\xEAtre-ajout-post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"off\",\n    noValidate: true,\n    className: `${classes.root} ${classes.form}`,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, currentId ? `Modifier \"${post.title}\"` : 'Creer'), /*#__PURE__*/React.createElement(TextField, {\n    name: \"title\",\n    variant: \"outlined\",\n    label: \"Titre\",\n    fullWidth: true,\n    value: postData.title,\n    onChange: e => setPostData({ ...postData,\n      title: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    ref: textRef,\n    name: \"message\",\n    variant: \"outlined\",\n    label: \"Message\",\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    value: postData.message,\n    onChange: e => setPostData({ ...postData,\n      message: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.emojiWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, picker && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.emoji,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Picker, {\n    onEmojiClick: handleEmoji,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 44\n    }\n  })), /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.emojiImage,\n    src: colorFull,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(EmojiEmotionsOutlined, {\n    onClick: () => {\n      setPicker(prev => !prev);\n    },\n    className: classes.emojiIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TextField, {\n    name: \"tags\",\n    variant: \"outlined\",\n    label: \"Tags (s\\xE9par\\xE9s par des virgules)\",\n    fullWidth: true,\n    value: postData.tags,\n    onChange: e => setPostData({ ...postData,\n      tags: e.target.value.split(',')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.fileInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FileBase, {\n    type: \"file\",\n    multiple: false,\n    onDone: ({\n      base64\n    }) => setPostData({ ...postData,\n      selectedFile: base64\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 44\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    className: classes.buttonSubmit,\n    variant: \"contained\",\n    size: \"large\",\n    type: \"submit\",\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \"Poster\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    size: \"small\",\n    onClick: clear,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Effacer\")));\n};\n\nexport default Form;","map":{"version":3,"sources":["/home/fred/Vid√©os/MERN-groupomania/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","useRef","TextField","Button","Typography","Paper","Box","Modal","EmojiEmotionsOutlined","useDispatch","useSelector","FileBase","Tooltip","AddIcon","Fab","Picker","colorFull","createPost","updatePost","useStyles","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","post","state","posts","find","_id","dispatch","classes","user","JSON","parse","localStorage","getItem","picker","setPicker","textRef","openPostModal","setOpenPostModal","clear","handleSubmit","e","preventDefault","name","result","handleEmoji","emoji","ref","current","focus","paper","absolute","root","form","target","value","emojiWrapper","emojiImage","prev","emojiIcon","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { TextField, Button, Typography, Paper, Box } from '@material-ui/core';\nimport Modal from '@material-ui/core'\nimport EmojiEmotionsOutlined from '@material-ui/icons/EmojiEmotionsOutlined'\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\n// Tooltip\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from '@material-ui/core/Fab';\n\n// Emoji\nimport Picker from 'emoji-picker-react'\n//image\nimport colorFull from '../../images/colorful.png'\n\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({ title: '', message: '', tags: '', selectedFile: '' });\n  const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const [picker, setPicker] = useState(false)\n  const textRef = useRef(null)\n  // Moddal\n  const [openPostModal, setOpenPostModal] = useState(false);\n\n\n\n  useEffect(() => {\n    if (post) setPostData(post);\n  }, [post]);\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({ title: '', message: '', tags: '', selectedFile: '' });\n  };\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      dispatch(createPost({ ...postData, name: user?.result?.name }));\n      clear();\n    } else {\n      dispatch(updatePost(currentId, { ...postData, name: user?.result?.name }));\n      clear();\n    }\n  };\n\n  const handleEmoji = (e, { emoji }) => {\n    const ref = textRef.current\n    ref.focus()\n  }\n\n\n  return (\n\n    <Paper className={classes.paper}>\n      <Tooltip title=\"Ajouter un post\" aria-label=\"add\">\n        <Fab className={classes.absolute}>\n          <AddIcon />\n        </Fab>\n      </Tooltip>\n      <Modal\n        open={openPostModal}\n        onClose={(e) => setOpenPostModal(false)}\n        aria-labelledby=\"fen√™tre-du-post\"\n        aria-describedby=\"fen√™tre-ajout-post\">\n\n      </Modal>\n      <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\n        <Typography variant=\"h6\">{currentId ? `Modifier \"${post.title}\"` : 'Creer'}</Typography>\n        <TextField name=\"title\" variant=\"outlined\" label=\"Titre\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\n        <TextField ref={textRef} name=\"message\" variant=\"outlined\" label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\n        <div className={classes.emojiWrapper}>\n          {picker && (\n            <div className={classes.emoji}><Picker onEmojiClick={handleEmoji} /></div>\n          )}\n          <img className={classes.emojiImage} src={colorFull} alt=\"\" />\n          <EmojiEmotionsOutlined onClick={() => { setPicker((prev) => !prev) }} className={classes.emojiIcon} />\n        </div>\n        <TextField name=\"tags\" variant=\"outlined\" label=\"Tags (s√©par√©s par des virgules)\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\n        <div className={classes.fileInput}><FileBase type=\"file\" multiple={false} onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} /></div>\n        <Button className={classes.buttonSubmit} variant=\"contained\" size=\"large\" type=\"submit\" fullWidth>Poster</Button>\n        <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Effacer</Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}