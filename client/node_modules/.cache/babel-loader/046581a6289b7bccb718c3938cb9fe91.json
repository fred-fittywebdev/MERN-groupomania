{"ast":null,"code":"var _jsxFileName = \"/home/fred/Vid\\xE9os/MERN-groupomania/client/src/components/Posts/Post/Comment.js\";\nimport React, { useRef, useState } from 'react';\nimport { Typography, TextField, Button } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport useStyles from './styles';\nimport { commentPost } from '../../../actions/posts';\n\nconst Comment = ({\n  post,\n  setCurrentId\n}) => {\n  var _user$result;\n\n  console.log(post);\n  const classes = useStyles();\n  const [comments, setComments] = useState(post === null || post === void 0 ? void 0 : post.comments);\n  const [comment, setComment] = useState('');\n  const user = JSON.parse(localStorage.getItem('profile'));\n  const dispatch = useDispatch();\n  const commentsRef = useRef();\n\n  const handleClick = async () => {\n    const finalComment = `${user.result.name}: ${comment}`;\n    const newComments = await dispatch(commentPost(finalComment, post._id));\n    setComment(newComments);\n    setComment('');\n    commentsRef.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.commentsWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.commentsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }\n  }, \"Comments\"), comments.map((c, i) => /*#__PURE__*/React.createElement(Typography, {\n    key: i,\n    gutterBottom: true,\n    variant: \"subtitle1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 29\n    }\n  }, c.split(': ')[0]), c.split(':')[1])), /*#__PURE__*/React.createElement(\"div\", {\n    ref: commentsRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }\n  })), (user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name) && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '50%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }, \"Votre commentaire\"), /*#__PURE__*/React.createElement(TextField, {\n    fullWidth: true,\n    rows: 3,\n    variant: \"outlined\",\n    label: \"Commentaire\",\n    multiline: true,\n    value: comment,\n    onChange: e => setComment(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: classes.btnComment,\n    style: {\n      marginTop: '10px'\n    },\n    fullWidth: true,\n    disabled: !comment,\n    variant: \"contained\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, \"Commenter\"))));\n};\n\nexport default Comment;","map":{"version":3,"sources":["/home/fred/VidÃ©os/MERN-groupomania/client/src/components/Posts/Post/Comment.js"],"names":["React","useRef","useState","Typography","TextField","Button","useDispatch","useStyles","commentPost","Comment","post","setCurrentId","console","log","classes","comments","setComments","comment","setComment","user","JSON","parse","localStorage","getItem","dispatch","commentsRef","handleClick","finalComment","result","name","newComments","_id","current","scrollIntoView","behavior","commentsWrapper","commentsContainer","map","c","i","split","width","e","target","value","btnComment","marginTop"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { Typography, TextField, Button } from '@material-ui/core'\nimport { useDispatch } from 'react-redux'\n\nimport useStyles from './styles'\nimport { commentPost } from '../../../actions/posts'\n\nconst Comment = ({ post, setCurrentId }) => {\n    console.log(post)\n    const classes = useStyles()\n    const [comments, setComments] = useState(post?.comments)\n    const [comment, setComment] = useState('')\n    const user = JSON.parse(localStorage.getItem('profile'))\n    const dispatch = useDispatch()\n    const commentsRef = useRef()\n\n    const handleClick = async () => {\n        const finalComment = `${user.result.name}: ${comment}`\n\n        const newComments = await dispatch(commentPost(finalComment, post._id))\n        setComment(newComments)\n        setComment('')\n\n        commentsRef.current.scrollIntoView({ behavior: 'smooth' })\n\n    }\n    return (\n        <div>\n            <div className={classes.commentsWrapper}>\n                <div className={classes.commentsContainer}>\n                    <Typography gutterBottom variant='h6'>Comments</Typography>\n                    {comments.map((c, i) => (\n                        <Typography key={i} gutterBottom variant=\"subtitle1\">\n                            <strong>{c.split(': ')[0]}</strong>\n                            {c.split(':')[1]}\n                        </Typography>\n                    ))}\n                    <div ref={commentsRef} />\n                </div>\n                {user?.result?.name && (\n                    <div style={{ width: '50%' }}>\n                        <Typography gutterBottom variant='h6'>Votre commentaire</Typography>\n                        <TextField\n                            fullWidth\n                            rows={3}\n                            variant='outlined'\n                            label='Commentaire'\n                            multiline\n                            value={comment}\n                            onChange={(e) => setComment(e.target.value)}\n                        />\n                        <Button className={classes.btnComment} style={{ marginTop: '10px' }} fullWidth disabled={!comment} variant='contained' onClick={handleClick}>\n                            Commenter\n                        </Button>\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Comment"]},"metadata":{},"sourceType":"module"}